{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/o001705/IIScProjects/blob/main/PNB_7_Dictionaries.ipynb%20-%20Week2%20Dictionary%20assignment\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Practice Notebook"
      ],
      "metadata": {
        "id": "xT7BS95x1w-9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dictionary is a composite datatype in the Python programming language. In a way, it is similar to lists. Lists are a collection of elements. Dictionaries are a collection of key, value pairs. Solutions to many programming problems can be easy and more concise with dictionaries. Here we explain all the important methods in the dictionary and some problem-solving with examples.\n",
        "\n",
        "Click [here](https://docs.python.org/3/library/stdtypes.html#mapping-types-dict) to go through official documentation on `dictionaries`."
      ],
      "metadata": {
        "id": "22fQfO2n3R4Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Exercise 1: \n",
        "From The dictionary created below, do the following:\n",
        "\n",
        "* Return a list of all the keys, using `list()` or `.keys()`.\n",
        "\n",
        "* Return the values of the dictionary using `.values()`.\n",
        "\n"
      ],
      "metadata": {
        "id": "J093ur414qXD"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "2YqKC6m61rqZ"
      },
      "outputs": [],
      "source": [
        "dict1 = {\"Delhi\" : \"New Delhi\", \"Uttar Pradesh\" : \"Lucknow\",\"Madhya Pradesh\" : \"Bhopal\",\"Karnataka\" : \"Bengaluru\",\"Assam\" : \"Dispur\",\"Gujarat\" : \"Gandhinagar\"}"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "dict1.keys()"
      ],
      "metadata": {
        "id": "x9NwmHSE9tXz",
        "outputId": "cb454b9f-d8d1-41b0-90dc-e2c84b0c6b7b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Delhi', 'Uttar Pradesh', 'Madhya Pradesh', 'Karnataka', 'Assam', 'Gujarat']"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "dict1.values()"
      ],
      "metadata": {
        "id": "K6JM6mps9zGR",
        "outputId": "e0332c5a-f0b8-442e-cd28-470e408b8931",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_values(['New Delhi', 'Lucknow', 'Bhopal', 'Bengaluru', 'Dispur', 'Gandhinagar'])"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Exercise 2: \n",
        "From the dictionary created in Exercise 1-\n",
        "\n",
        "* Display the capital of Karnataka by retrieving the corresponding value for the key."
      ],
      "metadata": {
        "id": "-g9lEVYr7QNt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "dict1['Karnataka']"
      ],
      "metadata": {
        "id": "7ZCZO0ms7ILp",
        "outputId": "6150a25b-46ec-46d7-f29b-2da1ae4186e7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        }
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Bengaluru'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Exercise 3:\n",
        "\n",
        "Add (and print) a new element in the dictionary."
      ],
      "metadata": {
        "id": "HUJg6Y_w8K1c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "dict1['Telangana'] = 'Hyderabad'\n",
        "print(dict1)"
      ],
      "metadata": {
        "id": "kDeZ642qgy8_",
        "outputId": "b75e8ce5-a40d-40d8-ef9d-7f1b6c314f20",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Delhi': 'New Delhi', 'Uttar Pradesh': 'Lucknow', 'Madhya Pradesh': 'Bhopal', 'Karnataka': 'Bengaluru', 'Assam': 'Dispur', 'Gujarat': 'Gandhinagar', 'Telangana': 'Hyderabad'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####Exercise 4:\n",
        "\n",
        "- Return the length of the dictionary using `len()`.\n"
      ],
      "metadata": {
        "id": "7lf9Hxs9CFFc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "len(dict1)"
      ],
      "metadata": {
        "id": "duut09pZB9F9",
        "outputId": "8a81e134-1936-446a-a33a-e530b6984bf8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####Exercise 5:\n",
        "\n",
        "* Remove a key value pair from the dictionary.\n",
        "* Add the same key value pair again in the `dictionary`.\n",
        "* Display all the key-value pairs using `items()`."
      ],
      "metadata": {
        "id": "P-r0gerfEFyi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "dict1.pop('Telangana')\n",
        "print(dict1)"
      ],
      "metadata": {
        "id": "5JdipHYYIrzG",
        "outputId": "e87bb526-aaf9-4bc2-ca53-bc3464998f51",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Delhi': 'New Delhi', 'Uttar Pradesh': 'Lucknow', 'Madhya Pradesh': 'Bhopal', 'Karnataka': 'Bengaluru', 'Assam': 'Dispur', 'Gujarat': 'Gandhinagar'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "dict1['Telangana'] = 'Hyderabad'"
      ],
      "metadata": {
        "id": "Z1rzWNkkEe1U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "for i in dict1.items():\n",
        "  print(i)"
      ],
      "metadata": {
        "id": "jtQVrlnzDI5Z",
        "outputId": "32e43d1d-8a19-484b-c486-9a07910eda6e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('Delhi', 'New Delhi')\n",
            "('Uttar Pradesh', 'Lucknow')\n",
            "('Madhya Pradesh', 'Bhopal')\n",
            "('Karnataka', 'Bengaluru')\n",
            "('Assam', 'Dispur')\n",
            "('Gujarat', 'Gandhinagar')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE"
      ],
      "metadata": {
        "id": "VM6oA8j6DaVF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE"
      ],
      "metadata": {
        "id": "r33SZ8yyFE69"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE"
      ],
      "metadata": {
        "id": "60BUPAdHFSSj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Exercise 6:\n",
        "\n",
        "Iterate over the keys of the dictionary using `for` and `.keys()` and print all the state capitals."
      ],
      "metadata": {
        "id": "O9LfCd_kL00L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "for i in dict1.keys():\n",
        "  print(dict1[i])"
      ],
      "metadata": {
        "id": "_jmS3h7qLq8I",
        "outputId": "7b2188cc-f3a9-4265-e113-b75a2fa2c4db",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "New Delhi\n",
            "Lucknow\n",
            "Bhopal\n",
            "Bengaluru\n",
            "Dispur\n",
            "Gandhinagar\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Exercise 7:\n",
        "\n",
        "* Initialize an empty dictionary ‘sen_map’.\n",
        "* Make the sentences all lower case.\n",
        "* Iterate over each word in the sentences.\n",
        "* Check if a word exists in the sen_map.\n",
        "* If not then add the word with a value of 1.\n",
        "* Otherwise, update the value of that word by 1."
      ],
      "metadata": {
        "id": "qvVSS8PSjDBT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sents = \"TalentSprint is a digital platform designed to transform the lives of professionals in the new economy. Its blended bootcamps offer deeptech skills.\""
      ],
      "metadata": {
        "id": "NRHRUlggk4vs"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "sen_map = {}\n",
        "sents = sents.lower()\n",
        "for word in sents.split():\n",
        "  if (word in sen_map.keys()):\n",
        "    sen_map[word] += 1\n",
        "  else:\n",
        "    sen_map[word] = 1\n",
        "print(sen_map.items())\n"
      ],
      "metadata": {
        "id": "54llyHu8jNHC",
        "outputId": "e9d88646-3525-4a22-d178-e29cc9ade981",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_items([('talentsprint', 1), ('is', 1), ('a', 1), ('digital', 1), ('platform', 1), ('designed', 1), ('to', 1), ('transform', 1), ('the', 2), ('lives', 1), ('of', 1), ('professionals', 1), ('in', 1), ('new', 1), ('economy.', 1), ('its', 1), ('blended', 1), ('bootcamps', 1), ('offer', 1), ('deeptech', 1), ('skills.', 1)])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Exercies 8:\n",
        "\n",
        "* Initialize an empty dictionary ‘counts’.\n",
        "* Define the following list names = ['Jack', 'John', 'Jill', 'John'].\n",
        "* Print the frequency count of elements in a list using a dictionary.\n",
        "* Using get method print the value of john.\n",
        "* Print a list of tuples containing the key-value pairs in ‘counts’.\n",
        "\n"
      ],
      "metadata": {
        "id": "T-D_DCUcPcqJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "counts = {}\n",
        "lst =  ['Jack', 'John', 'Jill', 'John']\n",
        "for name in lst:\n",
        "  if name in counts.keys():\n",
        "    counts[name] += 1\n",
        "  else:\n",
        "    counts[name] = 1\n",
        "print(counts)"
      ],
      "metadata": {
        "id": "JAByE5_rPZmr",
        "outputId": "47f234e9-e55d-4587-ee6d-0acc39cf4e43",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Jack': 1, 'John': 2, 'Jill': 1}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE # The Python dictionary .get() method provides a convenient way of getting the value of a key from a dictionary\n",
        "print(counts['John'])"
      ],
      "metadata": {
        "id": "RghSmebepmLS",
        "outputId": "2fd316c2-8cea-4771-cf84-bd713a16a898",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# YOUR CODE HERE\n",
        "for i in counts.items():\n",
        "  print(i)"
      ],
      "metadata": {
        "id": "iOBm5ICRmnNT",
        "outputId": "7580c014-b495-4b73-dae0-46dc5d7b2c93",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('Jack', 1)\n",
            "('John', 2)\n",
            "('Jill', 1)\n"
          ]
        }
      ]
    }
  ]
}